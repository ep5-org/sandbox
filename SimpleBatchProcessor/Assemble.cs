using static System.Console;
using static ep5BAS.Data;

//  this code reads the internal machine state as generated by the business rules and reduces the state
//      to a one-byte integer for each of the three output ports on the I/O controller

namespace ep5BAS
{
    internal class Assemble
    {
        public static void TheOutputArray(DigitalPoint[] digitalPoints)
        {
            int portA;
            int portB;
            int portC;

            if (digitalPoints.Length != IOpointCount)
            {
                WriteLine("The state image array is in error. It should have {0} elements but shows {1}...", IOpointCount, digitalPoints.Length);
                WriteLine("Press the <ANY> key to terminate the program.");
                _ = ReadKey(true);
                return;
            }
            foreach (DigitalPoint digitalPoint in digitalPoints)
            {
                Write("{0} ", digitalPoint.currentState);
            }
            WriteLine();
            //  set first port
            portA = 0;
            for (int i = 0; i < 8; i++)
            {
                if (digitalPoints[i].currentState.Equals("ON "))    //  must be three characters
                {
                    portA = portA.SetBitTo1(i);
                }
                else
                {
                    portA = portA.SetBitTo0(i);
                }
            }

            //  set second port
            portB = 0;
            for (int i = 8; i < 16; i++)
            {
                if (digitalPoints[i].currentState.Equals("ON "))
                    portB = portB.SetBitTo1(i - 8);
                else
                    portB = portB.SetBitTo0(i - 8);
            }

            //  set third port
            portC = 0;
            for (int i = 16; i < 24; i++)
            {
                if (digitalPoints[i].currentState.Equals("ON "))
                    portC = portC.SetBitTo1(i - 16);
                else
                    portC = portC.SetBitTo0(i - 16);
            }

            SeaMAXdata[0] = (byte)portA;
            SeaMAXdata[1] = (byte)portB;
            SeaMAXdata[2] = (byte)portC;

            return;
        }
    }
}

static class BitExtensions
{
    public static int SetBitTo1(this int value, int position)
    {
        // Set a bit at position to 1.
        return value |= (1 << position);
    }

    public static int SetBitTo0(this int value, int position)
    {
        // Set a bit at position to 0.
        return value & ~(1 << position);
    }
}
